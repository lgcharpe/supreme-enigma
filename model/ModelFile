FROM llama3.3

# Parameters that we can change

# MiroStat
# Enable Mirostat sampling for controlling perplexity. (default: 0, 0 = disabled, 1 = Mirostat, 2 = Mirostat 2.0)
PARAMETER mirostat 0
# Influences how quickly the algorithm responds to feedback from the generated text. A lower learning rate will result in slower adjustments, while a higher learning rate will make the algorithm more responsive.
PARAMETER mirostat_eta 0.1
# Controls the balance between coherence and diversity of the output. A lower value will result in more focused and coherent text.
PARAMETER mirostat_tau 5.0

# Seed
PARAMETER seed 0

# PARAMETER stop stop_str (can have multiple of these)

# Randomization
# The temperature of the model. Increasing the temperature will make the model answer more creatively.
PARAMETER temperature 0.3
# Reduces the probability of generating nonsense. A higher value (e.g. 100) will give more diverse answers, while a lower value (e.g. 10) will be more conservative.
PARAMETER top_k 10
# Works together with top-k. A higher value (e.g., 0.95) will lead to more diverse text, while a lower value (e.g., 0.5) will generate more focused and conservative text.
PARAMETER top_p 0.5
# Alternative to the top_p, and aims to ensure a balance of quality and variety. The parameter p represents the minimum probability for a token to be considered, relative to the probability of the most likely token. For example, with p=0.05 and the most likely token having a probability of 0.9, logits with a value less than 0.045 are filtered out.
# PARAMETER min_p 0.0

# Repetition control
# Sets how far back for the model to look back to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)
PARAMETER repeat_last_n 64
# Sets how strongly to penalize repetitions. A higher value (e.g., 1.5) will penalize repetitions more strongly, while a lower value (e.g., 0.9) will be more lenient.
PARAMETER repeat_penalty 1.1

# Context length and generation
PARAMETER num_ctx 32768
# Maximum number of tokens to predict when generating text. (Default: -1, infinite generation)
PARAMETER num_predict -1


# System message to specify the behaviour
SYSTEM """
You are an expert parliamentary analyst assistant specialized in creating structured summaries of parliamentary proceedings. Your role is to analyze and summarize parliamentary information according to strict JSON formatting requirements.

Core Capabilities:
- Process parliamentary proceedings in multiple languages.
- Generate responses in multiple languages based on the {language} parameter
- Generate both single-day and multi-day period summaries
- Structure all outputs in JSON format with specific required fields
- Support queries for multiple countries using ISO 3166-1 alpha-2 country codes
- Handle date-based queries using ISO 8601 format
- Process topic-specific queries using numeric topic IDs

Response Format Rules:
1. Always provide complete JSON objects with all required fields
2. Maintain consistent data types
3. If there is not enough data to reasonably fill a field, leave it empty.
4. In case of empty fields, use empty arrays [] instead of null, and null instead of an empty string "" depending on the data type.

Content Guidelines:
- Summaries should be no longer than the given word limit and focus on key developments
- Include only factual, verifiable information from the proceedings
- Capture significant political exchanges and developments
- Document both serious parliamentary business and noteworthy lighter moments
- Highlight cross-party agreements and disagreements
- Record all formal voting results with exact counts
- Note any special events or unusual occurrences
- Use a reasonable, straight-forward, and clear tone.

When synthesizing period summaries:
- Combine similar events and themes across multiple days
- Focus on the most impactful developments
- Identify patterns in political behavior and voting
- Track ongoing disputes and their evolution
- Document the progression of major policy discussions
"""

# If we want to specify a start message system (similar to ICL)
# MESSAGE user text
# MESSAGE assistant answer
# ...

# To add an adapter (make sure the model the adapter is trained on is the same as the model for inference)
# ADAPTER path_to_adapter
